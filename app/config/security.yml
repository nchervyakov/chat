# you can read more about security in the related section of the documentation
# http://symfony.com/doc/current/book/security.html
security:
    # http://symfony.com/doc/current/book/security.html#encoding-the-user-s-password
    encoders:
        #Symfony\Component\Security\Core\User\User: plaintext
        AppBundle\Entity\User: bcrypt

    acl:
        connection: default

    # http://symfony.com/doc/current/book/security.html#hierarchical-roles
    role_hierarchy:
        ROLE_ADMIN:       [ROLE_USER, ROLE_SONATA_ADMIN]
        ROLE_CLIENT:      [ROLE_USER]
        ROLE_MODEL:       [ROLE_USER]
        ROLE_SUPER_ADMIN: [ROLE_USER, ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]
        SONATA:
#            - ROLE_SONATA_PAGE_ADMIN_PAGE_EDIT  # if you are using acl then this line must be commented

    # http://symfony.com/doc/current/book/security.html#where-do-users-come-from-user-providers
    providers:
#        in_memory:
#            memory:
#                users:
#                    admin: { password: adminpass, roles: [ 'ROLE_ADMIN' ] }

        fos_userbundle:
            id: fos_user.user_provider.username

        api_token_user_provider:
            id: api_token_user_provider

    # the main part of the security, where you can set up firewalls
    # for specific sections of your app
    firewalls:
        # disables authentication for assets and the profiler, adapt it according to your needs
        dev:
            pattern:  ^/(_(profiler|wdt)|css|images|js)/
            security: false

        api:
            pattern: '^/api(.*)'
            anonymous: true
            stateless: true
            context: api
            simple_preauth:
                authenticator: api_token_authenticator
            provider: api_token_user_provider

        # -> custom firewall for the admin area of the URL
        admin:
            switch_user:        true
            pattern:            '^/admin(.*)'
            context:            user
            form_login:
                provider:       fos_userbundle
                login_path:     /admin/login
                use_forward:    false
                check_path:     /admin/login_check
                failure_path:   null
            logout:
                path:           /admin/logout
            anonymous:          true

            remember_me:
                key:        "%secret%"
                lifetime:   31536000
                path:       /admin
                domain:     ~
                always_remember_me: true
#                name:       "ADMIN_REMEMBERME"

#        switch_user:
#            switch_user: true
#            pattern: ^/
#            anonymous: ~

        secured_area:
            logout: true
            switch_user: true
            anonymous: ~
            pattern: ^/
            context: user
            form_login:
                provider: fos_userbundle
                login_path: /connect/
                check_path: /login/login_check
            oauth:
                resource_owners:
                    facebook:           "/login/check-facebook"
#                    vkontakte:          "/login/check-vkontakte"
                    twitter:            "/login/check-twitter"
#                    google:             "/login/check-google"
#                    github:             "/login/check-github"
#                    my_custom_provider: "/login/check-custom"

                login_path:        /login
                use_forward:       false
                failure_path:      /login

                oauth_user_provider:
                    service: hwi_oauth.user.provider.fosub_bridge

#                success_handler: "@app.oauth.handler"

            remember_me:
                key:        "%secret%"
                lifetime:   31536000
                path:       /
                domain:     ~
                always_remember_me: true


    # with these settings you can restrict or allow access for different parts
    # of your application based on roles, ip, host or methods
    # http://symfony.com/doc/current/cookbook/security/access_control.html
    access_control:
        #- { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY, requires_channel: https }
        - { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/register, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/resetting, roles: IS_AUTHENTICATED_ANONYMOUSLY }

        # Admin login page needs to be access without credential
        - { path: ^/admin/login$, roles: [IS_AUTHENTICATED_ANONYMOUSLY, ROLE_USER] }
        - { path: ^/admin/logout$, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/admin/login_check$, roles: IS_AUTHENTICATED_ANONYMOUSLY }

        # Secured part of the site
        # This config requires being logged for the whole site and having the admin role for the admin part.
        # Change these rules to adapt them to your needs
        - { path: ^/admin/, roles: [ROLE_ADMIN, ROLE_SONATA_ADMIN] }
        - { path: ^/.*, roles: IS_AUTHENTICATED_ANONYMOUSLY }