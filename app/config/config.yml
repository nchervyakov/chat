imports:
    - { resource: parameters.yml }
    - { resource: security.yml }
    - { resource: services.yml }
    - { resource: sonata_core.yml }
    - { resource: @AppBundle/Resources/config/admin.yml }
    - { resource: @PaymentBundle/Resources/config/admin.yml }

parameters:
    hwi_oauth.registration.form.handler.fosub_bridge.class: AppBundle\Form\FOSUBRegistrationFormHandler
    hwi_oauth.authentication.listener.oauth.class: AppBundle\Security\Http\Firewall\OAuthListener
    hwi_oauth.user.provider.fosub_bridge.class: AppBundle\Security\Core\User\FOSUBUserProvider
    hwi_oauth.authentication.provider.oauth.class: AppBundle\Security\Core\Authentication\Provider\OAuthProvider
    fos_rest.body_listener.class: AppBundle\Event\Listener\RestBodyListener
    sitename: 'Chat with Models'
    developer_name: "Nikolay Chervyakov"
    developer_email: "nick.chervyakov@gmail.com"

framework:
    #esi:             ~
    translator:      { fallbacks: ["%locale%"] }
    secret:          "%secret%"
    router:
        resource: "%kernel.root_dir%/config/routing.yml"
        strict_requirements: ~
    form:            ~
    csrf_protection: ~
    validation:      { enable_annotations: true }
    templating:
        engines: ['twig']
        #assets_version: SomeVersionScheme
    default_locale:  "%locale%"
    trusted_hosts:   ~
    trusted_proxies: ~
    session:
        # handler_id set to null will use default session handler from php.ini
        handler_id:  ~
    fragments:       ~
    http_method_override: true
    serializer:
        enabled: true

# Twig Configuration
twig:
    debug:            "%kernel.debug%"
    strict_variables: "%kernel.debug%"
    globals:
        sitename: "%sitename%"
        developer_name: "%developer_name%"
        developer_email: "%developer_email%"
        socket_io_token: ''
        js_params:
            socket_io_host: "%socket_io.host%"
            sitename: "%sitename%"
            socket_io_token: ''
    form:
#        #resources: ['bootstrap_3_layout.html.twig']
        resources:
#            - 'bootstrap_3_horizontal_layout.html.twig'
            - 'SonataCoreBundle:Form:datepicker.html.twig'
    form_themes:
        # other form themes
        - 'VichUploaderBundle:Form:fields.html.twig'
#    exception_controller:  twig.controller.exception:showAction
#    exception_controller: 'fos_rest.controller.exception:showAction'

# Assetic Configuration
assetic:
    debug:          "%kernel.debug%"
    use_controller: true
    bundles:        [ AppBundle ]
    java: ~ # /usr/bin/java
    filters:
        cssrewrite: ~
        #closure:
        #    jar: "%kernel.root_dir%/Resources/java/compiler.jar"
        #yui_css:
        #    jar: "%kernel.root_dir%/Resources/java/yuicompressor-2.4.7.jar"

# Doctrine Configuration
doctrine:
    dbal:
        driver:   "%database_driver%"
        host:     "%database_host%"
        port:     "%database_port%"
        dbname:   "%database_name%"
        user:     "%database_user%"
        password: "%database_password%"
        charset:  UTF8
        # if using pdo_sqlite as your database driver:
        #   1. add the path in parameters.yml
        #     e.g. database_path: "%kernel.root_dir%/data/data.db3"
        #   2. Uncomment database_path in parameters.yml.dist
        #   3. Uncomment next line:
        #     path:     "%database_path%"

        types:
            json: Sonata\Doctrine\Types\JsonType
    orm:
        auto_generate_proxy_classes: "%kernel.debug%"
        auto_mapping: true
#        entity_managers:
#            default:
#                mappings:
#                    AppBundle: ~
#                    SonataUserBundle: ~
#                    FOSUserBundle: ~

sensio_framework_extra:
    request:
        converters: true

doctrine_migrations:
    dir_name: %kernel.root_dir%/DoctrineMigrations
    namespace: Application\Migrations
    table_name: migration_versions
    name: Application Migrations

# Swiftmailer Configuration
swiftmailer:
    transport: "%mailer_transport%"
    host:      "%mailer_host%"
    username:  "%mailer_user%"
    password:  "%mailer_password%"
    spool:     { type: memory }

hwi_oauth:
    # name of the firewall in which this bundle is active, this setting MUST be set
    firewall_name: secured_area

    # an optional setting to configure a query string parameter which can be used to redirect
    # the user after authentication, e.g. /connect/facebook?_destination=/my/destination will
    # redirect the user to /my/destination after facebook authenticates them.  If this is not
    # set then the user will be redirected to the original resource that they requested, or
    # the base address if no resource was requested.  This is similar to the behaviour of
    # [target_path_parameter for form login](http://symfony.com/doc/2.0/cookbook/security/form_login.html).
    # target_path_parameter: _destination

    # an optional setting to use the HTTP REFERER header to be used in case no
    # previous URL was stored in the session (i.e. no resource was requested).
    # This is similar to the behaviour of
    # [using the referring URL for form login](http://symfony.com/doc/2.0/cookbook/security/form_login.html#using-the-referring-url).
    # use_referer: true

    # here you will add one (or more) configurations for resource owners
    # and other settings you want to adjust in this bundle, just checkout the list below!

    # Set up providers. look here: https://github.com/hwi/HWIOAuthBundle/blob/master/Resources/doc/2-configuring_resource_owners.md

    resource_owners:
        facebook:
            type:               facebook
            client_id:          "%oauth.facebook.client_id%"
            client_secret:      "%oauth.facebook.client_secret%"
            scope:              "email,public_profile,user_photos,user_about_me,user_activities,user_friends"
#            options:
#                display: popup #dialog is optimized for popup window

        twitter:
            type:               twitter
            client_id:          "%oauth.twitter.client_id%"
            client_secret:      "%oauth.twitter.client_secret%"

#        vkontakte:
#            type:               vkontakte
#            client_id:          "%oauth.vkontakte.client_id%"
#            client_secret:      "%oauth.vkontakte.client_secret%"
#            scope:              "email"

#        google:
#            type:               google
#            client_id:          "%oauth.google.client_id%"
#            client_secret:      "%oauth.google.client_secret%"
#            scope:              "email profile"
##            options:
##                access_type:     offline
##                request_visible_actions: "http://schemas.google.com/AddActivity http://schemas.google.com/CommentActivity"

#        github:
#            type:               github
#            client_id:          "%oauth.github.client_id%"
#            client_secret:      "%oauth.github.client_secret%"

    fosub:
        # If CURL throws a certificate error, see here how to solve:
        # https://laracasts.com/discuss/channels/general-discussion/curl-error-60-ssl-certificate-problem-unable-to-get-local-issuer-certificate

        # try 30 times to check if a username is available (foo, foo1, foo2 etc)
        username_iterations: 30

        # mapping between resource owners (see below) and properties
        properties:
#            github:     githubId
#            google:     googleId
            facebook:   facebookId
#            vkontakte:  vkontakteId
            twitter:    twitterId
#            my_custom_provider: customId

    connect: ~
    http_client:
        timeout:       10
        verify_peer:   true
        ignore_errors: true
        max_redirects: 5

fos_user:
    db_driver: orm
    firewall_name: secured_area

    user_class: AppBundle\Entity\User
    group:
        group_class: AppBundle\Entity\Group
        group_manager: sonata.user.orm.group_manager
    registration:
        form:
            type: user_registration
            validation_groups: [ AppRegistration, Default ]
        confirmation:
            enabled: false
            #template:   'AppBundle:Registration:email.html.twig'
    profile:
        form:
            type: user_profile
            validation_groups: [ AppProfile, Default ]
    service:
        user_manager: sonata.user.orm.user_manager

fos_js_routing:
    routes_to_expose:
        - homepage
        - chat
        - chat_add_message
        - chat_add_image_message
        - chat_check_can_add_message
        - chat_show
        - chat_get_new_messages
        - chat_get_previous_messages
        - chat_mark_messages_read
        - user_show
        - search_index
        - chat_agree_to_pay
#        - coins_add
        - profile_delete_photo
        - profile_add_photo
        - profile_show
        - profile_photos
        - queue_fetch_new_messages
        - complain_message
        - delete_own_message
#        - fos_user_registration_register
        - payments_prepare_coin
        - payments_estimate_coins

fos_rest:
    view:
        jsonp_handler: ~
        view_response_listener: force
        formats:
            jsonp: false
            json: true
            xml: true
            rss: false
        templating_formats:
            html: false
    disable_csrf_role: ROLE_API
    unauthorized_challenge: "Token realm=\"API area\""
    param_fetcher_listener: true
    allowed_methods_listener: true
    body_listener:
        array_normalizer:
            service: fos_rest.normalizer.camel_keys
            forms: true
    access_denied_listener:
        json: true
    format_listener:
        rules:
            - { path: '^/api', priorities: ['json', 'xml'], fallback_format: json, prefer_extension: true }
            - { path: '^/', stop: true } # Available for version >= 1.5
        media_type:
            version_regex:        '/(v|version)=(?P<version>[0-9\.]+)/'
    body_converter:
        enabled: true
        validate: true
        validation_errors_argument: validationErrors # This is the default value
#    exception:
#        enabled: true
#        exception_controller: 'FOS\RestBundle\Controller\ExceptionController::showAction'
#        codes:
#            'Symfony\Component\Security\Core\Exception\InsufficientAuthenticationException': 401
    routing_loader:
        default_format: json
        include_format: true

#    serializer:
#        serialize_null: true

knp_menu:
#    twig:
#        template: AppBundle:Default:knp_menu.html.twig

#jms_di_extra:
#    locations:
#        all_bundles: false
#        bundles: [ AppBundle ]
#        directories: ["%kernel.root_dir%/../src"]
#
#    automatic_controller_injections:
#        properties:
#            request: "@request"
#            router: "@router"
#
#        method_calls:
#            setRouter: ["@router"]

hautelook_alice:
    locale: en_US   # default
    seed: 1         # default

knp_paginator:
    page_range: 5                      # default page range used in pagination control
    default_options:
        page_name: page                # page query parameter name
        sort_field_name: sort          # sort field query parameter name
        sort_direction_name: direction # sort direction query parameter name
        distinct: true                 # ensure distinct results, useful when ORM queries are using GROUP BY statements
    template:
        pagination: KnpPaginatorBundle:Pagination:twitter_bootstrap_v3_pagination.html.twig     # sliding pagination controls template
        sortable: KnpPaginatorBundle:Pagination:sortable_link.html.twig # sort link template

vich_uploader:
    db_driver: orm # or mongodb or propel or phpcr
    mappings:
        user_image:
            uri_prefix:         /uploads/photo
            upload_destination: %kernel.root_dir%/../web/uploads/photo
            inject_on_load:     false
            delete_on_update:   true
            delete_on_remove:   true
            namer:              vich_uploader.namer_slugify_origname

        emoticon:
            uri_prefix:         /images/emoticons
            upload_destination: %kernel.root_dir%/../web/images/emoticons
            inject_on_load:     false
            delete_on_update:   true
            delete_on_remove:   true

        image_message:
            uri_prefix:         /uploads/messages
            upload_destination: %kernel.root_dir%/../web/uploads/messages
            inject_on_load:     false
            delete_on_update:   true
            delete_on_remove:   true
            namer:              vich_uploader.namer_slugify_origname

#jms_security_extra:
#    # Whether you want to secure all services (true), or only secure specific
#    # services (false); see also below
#    secure_all_services: false
#
#    # Enabling this setting will add an additional special attribute "ROLE_IDDQD".
#    # Anybody with this attribute will effectively bypass all security checks.
#    enable_iddqd_attribute: false
#
#    # Enables expression language
#    expressions: true
#
#    # Allows you to disable some, or all built-in voters
#    voters:
#        disable_authenticated: false
#        disable_role:          false
#        disable_acl:           false
#
#    # Allows you to specify access control rules for specific methods, such
#    # as controller actions
#    method_access_control: { }
#
#    util:
#        secure_random:
##            connection: # the doctrine connection name
#            table_name: seed_table
##            seed_provider: # service id of your own seed provider implementation

liip_imagine:
    resolvers:
       default:
          web_path: ~

    filter_sets:
        cache: ~
        user_photo_thumb:
            quality: 75
            filters:
                thumbnail: { size: [252, 196], mode: inset, allow_upscale: true }
        user_photo_big:
            quality: 75
            filters:
                thumbnail: { size: [800, 600], mode: inset }
        user_message_thumb:
            quality: 75
            filters:
                thumbnail: { size: [52, 52], mode: outbond }
        user_message_image_thumb:
            quality: 75
            filters:
                thumbnail: { size: [252, 480], mode: inset, allow_upscale: true }
        search_user_photo:
            quality: 75
            filters:
                thumbnail: { size: [348, 348], mode: inset, allow_upscale: true }
        search_user_photo_small:
            quality: 75
            filters:
                thumbnail: { size: [128, 128], mode: inset, allow_upscale: true }
        admin_message_image:
            quality: 75
            filters:
                thumbnail: { size: [128, 360], mode: inset, allow_upscale: true }

sonata_block:
    default_contexts: [cms]
    blocks:
        # Enable the SonataAdminBundle block
        sonata.admin.block.admin_list:
            contexts:   [admin]
        # Your other blocks

        sonata.user.block.menu:    # used to display the menu in profile pages
        sonata.user.block.account: # used to display menu option (login option)
        sonata.block.service.text: # used to if you plan to use Sonata user routes

        sonata.admin.block.search_result:
            contexts: [admin]

sonata_admin:
    title: "%sitename%"
    options:
        form_type: standard
    templates:
        layout: ::admin_standard_layout.html.twig

sonata_user:
    security_acl: true
    manager_type: orm # can be orm or mongodb
    class:
        user: AppBundle\Entity\User
        group: AppBundle\Entity\Group
    admin:
        user:
            class: AppBundle\Admin\UserAdmin
            controller: AppBundle:UserAdmin
    impersonating:
        route:                homepage
        #parameters:           { path: / }

lexik_maintenance:
    authorized:
#        path: /                                                         # Optional. Authorized path, accepts regexs
#        host: schat.dev                                                 # Optional. Authorized domain, accepts regexs
#        ips: ['127.0.0.1', '172.123.10.14']                                 # Optional. Authorized ip addresses
#        query: { foo: bar }                                                 # Optional. Authorized request query parameter (GET/POST)
#        route:                                                              # Optional. Authorized route name
#        attributes:                                                         # Optional. Authorized route attributes

    driver:
        ttl: 3600                                                                  # Optional ttl option, can be not set

        # File driver
        class: '\Lexik\Bundle\MaintenanceBundle\Drivers\FileDriver'                # class for file driver
        options: {file_path: %kernel.root_dir%/cache/lock}                         # file_path is the complete path for create the file

        # MemCache driver
#        class: Lexik\Bundle\MaintenanceBundle\Drivers\MemCacheDriver               # class for MemCache driver
#        options: {key_name: 'maintenance', host: 127.0.0.1, port: 11211}           # need to define a key_name, the host and port

        # Database driver:
#        class: 'Lexik\Bundle\MaintenanceBundle\Drivers\DatabaseDriver'             # class for database driver

        # Option 1 : for doctrine
        options: {connection: custom}                                            # Optional. You can choice an other connection. Without option it's the doctrine default connection who will be used

        # Option 2 : for dsn, you must have a column ttl type datetime in your table.
#        options: {dsn: "mysql:dbname=maintenance;host:localhost", table: maintenance, user: root, password: root}  # the dsn configuration, name of table, user/password

    #Optional. response code and status of the mantainence page
    response:
        code: 503
        status: "Service Temporarily Unavailable"

stof_doctrine_extensions:
    default_locale: en_US

    # Only used if you activated the Uploadable extension
    uploadable:
        # Default file path: This is one of the three ways you can configure the path for the Uploadable extension
        default_file_path:       %kernel.root_dir%/../web/uploads

        # Mime type guesser class: Optional. By default, we provide an adapter for the one present in the HttpFoundation component of Symfony
        mime_type_guesser_class: Stof\DoctrineExtensionsBundle\Uploadable\MimeTypeGuesserAdapter

        # Default file info class implementing FileInfoInterface: Optional. By default we provide a class which is prepared to receive an UploadedFile instance.
        default_file_info_class: Stof\DoctrineExtensionsBundle\Uploadable\UploadedFileInfo

    orm:
        default:
            timestampable:  true
#            IpTraceable:    true
#    mongodb:
#        default: ~


old_sound_rabbit_mq:
    connections:
        default:
            host:     'localhost'
            port:     5672
            user:     'guest'
            password: 'guest'
            vhost:    '/'
            lazy:     true
            connection_timeout: 3
            read_write_timeout: 3

            # requires php-amqplib v2.4.1+ and PHP5.4+
            keepalive: true

            # requires php-amqplib v2.4.1+
            heartbeat: 0
    producers:
        notifications:
            connection:         default
            exchange_options:   {name: 'notifications', type: direct, durable: false}
#            queue_options:      {arguments: {'x-message-ttl': ['I', 20000]}, durable: false}
        user_info:
            connection:         default
            exchange_options:   {name: 'user_info', type: direct, durable: true}
            queue_options:      {name: 'user_info', durable: true}
            auto_setup_fabric:  true
    consumers: ~
#        upload_picture:
#            connection:       default
#            exchange_options: {name: 'upload-picture', type: direct}
#            queue_options:    {name: 'upload-picture'}
#            callback:         upload_picture_service

nelmio_api_doc:
    cache:
        enabled: true

    sandbox:
        authentication:
            delivery: header
            name: Authorization

nelmio_cors:
    paths:
        '^/api/':
            allow_origin: ['*']
            allow_headers: ['*']
            allow_methods: ['POST', 'PUT', 'GET', 'DELETE', 'PATCH', 'OPTIONS']
            max_age: 3600

payum:
    security:
        token_storage:
            PaymentBundle\Entity\PaymentToken: { doctrine: orm }

    storages:
        PaymentBundle\Entity\Payment: { doctrine: orm }

    gateways:
        paypal_express_checkout_with_ipn_enabled:
            paypal_express_checkout_nvp:
                username:  %payments.paypal_username%
                password:  %payments.paypal_password%
                signature: %payments.paypal_signature%
                sandbox: %payments.paypal_express_sandbox%