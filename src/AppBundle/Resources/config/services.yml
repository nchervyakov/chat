parameters:
    app.registration.form.class: AppBundle\Form\Type\RegistrationFormType
    app.profile.form.class: AppBundle\Form\Type\ProfileFormType

services:
    app.menu_builder:
        class: AppBundle\Menu\MenuBuilder
        arguments: ["@knp_menu.factory"]
        calls:
            - [setContainer, ["@service_container"]]

    app.menu.main:
        # the service definition requires setting the class
        class: Knp\Menu\MenuItem
        factory_service: app.menu_builder
        factory_method: createMainMenu
        arguments: ["@request"]
        scope: request # needed as we have the request as a dependency here
        tags:
            - { name: knp_menu.menu, alias: main } # The alias is what is used to retrieve the menu

    app.registration.form.type:
        class: %app.registration.form.class%
        arguments:
            - %fos_user.model.user.class%
            - @fos_user.user_manager
        tags:
            - {name: form.type, alias: user_registration}

    app.profile.form.type:
        class: %app.profile.form.class%
        arguments:
            - %fos_user.model.user.class%
            - @fos_user.user_manager
        tags:
            - {name: form.type, alias: user_profile}

    app.conversation:
        class: AppBundle\Conversation\ConversationService
        calls:
            - [setContainer, ["@service_container"]]

    app.request_access_evaluator:
        class: AppBundle\Security\RequestAccessEvaluator
        calls:
            - [setContainer, ["@service_container"]]

    app.downloader:
        class: AppBundle\Http\Downloader

    app.user_manager:
        class: AppBundle\User\UserManager
        calls:
            - [setContainer, ["@service_container"]]

    form.user_photo:
        class: AppBundle\Form\Type\UserPhotoType
        scope: prototype
        tags:
            - {name: form.type, alias: user_photo}

    app.event.profile_listener:
        class: AppBundle\Event\Listener\FOSProfileListener
        calls:
            - [setContainer, ["@service_container"]]
        tags:
            - {name: kernel.event_listener, event: fos_user.profile.edit.success, method: onProfileSuccess}

    app.event.registration_listener:
        class: AppBundle\Event\Listener\RegistrationListener
        calls:
            - [setContainer, ["@service_container"]]
        tags:
            - {name: kernel.event_listener, event: registration.success, method: onRegistrationSuccess}

    app.event.login_listener:
        class: AppBundle\Event\Listener\LoginListener
        calls:
            - [setContainer, ["@service_container"]]
        tags:
            - {name: kernel.event_listener, event: security.interactive_login, method: onSuccessLogin}

    app.twig.extension:
        class: AppBundle\Twig\Extension\AppExtension
        calls:
            - [setContainer, ["@service_container"]]
        tags:
            - {name: twig.extension}

#    twig.extension.l18n:
#        class: Twig_Extensions_Extension_Intl
#        tags:
#            - {name: twig.extension}

    app.emoticon_manager:
        class: AppBundle\Emoticon\EmoticonManager
        calls:
            - [setContainer, ["@service_container"]]

    app.facebook.client:
        class: %guzzle.client.class%
        arguments:
            - "https://graph.facebook.com/"
        tags:
            - {name: guzzle.client}

    app.form.type.entity_hidden:
       class: AppBundle\Form\Type\EntityHiddenType
       arguments: ["@doctrine.orm.entity_manager"]
       tags:
        - { name: form.type, alias: entity_hidden }


#    app.oauth.handler:
#        class: AppBundle\OAuth\OAuthHandler
#        calls:
#            - [setContainer, ["@service_container"]]



