parameters:
    app.registration.form.class: AppBundle\Form\Type\RegistrationFormType
    app.profile.form.class: AppBundle\Form\Type\ProfileFormType
    app.doctrine_extensions.event_listener.ip_trace.class: AppBundle\Event\Listener\IpTraceSubscriber

services:
    app.menu_builder:
        class: AppBundle\Menu\MenuBuilder
        arguments: ["@knp_menu.factory"]
        calls:
            - [setContainer, ["@service_container"]]

    app.menu.main:
        # the service definition requires setting the class
        class: Knp\Menu\MenuItem
        factory_service: app.menu_builder
        factory_method: createMainMenu
        arguments: ["@request"]
        scope: request # needed as we have the request as a dependency here
        tags:
            - { name: knp_menu.menu, alias: main } # The alias is what is used to retrieve the menu

    app.registration.form.type:
        class: %app.registration.form.class%
        arguments:
            - %fos_user.model.user.class%
            - "@fos_user.user_manager"
        tags:
            - {name: form.type, alias: user_registration}

    app.profile.form.type:
        class: %app.profile.form.class%
        arguments:
            - %fos_user.model.user.class%
            - "@fos_user.user_manager"
        tags:
            - {name: form.type, alias: user_profile}

    app.conversation:
        class: AppBundle\Conversation\ConversationService
        calls:
            - [setContainer, ["@service_container"]]

    app.complaints:
        class: AppBundle\Conversation\ComplaintsService
        calls:
            - [setContainer, ["@service_container"]]

    app.request_access_evaluator:
        class: AppBundle\Security\RequestAccessEvaluator
        calls:
            - [setContainer, ["@service_container"]]

    app.downloader:
        class: AppBundle\Http\Downloader

    app.user_manager:
        class: AppBundle\User\UserManager
        calls:
            - [setContainer, ["@service_container"]]

    form.user_photo:
        class: AppBundle\Form\Type\UserPhotoType
        scope: prototype
        tags:
            - {name: form.type, alias: user_photo}

    form.oauth_request:
        class: AppBundle\Form\Type\OAuthRequestType
        scope: prototype
        tags:
            - {name: form.type, alias: oauth_request}

    form.conversation:
        class: AppBundle\Form\Type\ConversationType
        scope: prototype
        tags:
            - {name: form.type, alias: conversation}

    form.edit_conversation:
        class: AppBundle\Form\Type\EditConversationType
        scope: prototype
        arguments: ["@security.authorization_checker"]
        tags:
            - {name: form.type, alias: edit_conversation}

    form.message:
        class: AppBundle\Form\Type\MessageType
        scope: prototype
        arguments: ["@security.authorization_checker"]
        tags:
            - {name: form.type, alias: message}

    app.event.profile_listener:
        class: AppBundle\Event\Listener\FOSProfileListener
        calls:
            - [setContainer, ["@service_container"]]
        tags:
            - {name: kernel.event_listener, event: fos_user.profile.edit.success, method: onProfileSuccess}

    app.event.registration_listener:
        class: AppBundle\Event\Listener\RegistrationListener
        calls:
            - [setContainer, ["@service_container"]]
        tags:
            - {name: kernel.event_listener, event: registration.success, method: onRegistrationSuccess}

    app.event.login_listener:
        class: AppBundle\Event\Listener\LoginListener
        calls:
            - [setContainer, ["@service_container"]]
        tags:
            - {name: kernel.event_listener, event: security.interactive_login, method: onSuccessLogin}

    app.twig.extension:
        class: AppBundle\Twig\Extension\AppExtension
        calls:
            - [setContainer, ["@service_container"]]
        tags:
            - {name: twig.extension}

#    twig.extension.l18n:
#        class: Twig_Extensions_Extension_Intl
#        tags:
#            - {name: twig.extension}

    app.emoticon_manager:
        class: AppBundle\Emoticon\EmoticonManager
        calls:
            - [setContainer, ["@service_container"]]

    app.facebook.client:
        class: %guzzle.client.class%
        arguments:
            - "https://graph.facebook.com/"
        tags:
            - {name: guzzle.client}

    app.form.type.entity_hidden:
       class: AppBundle\Form\Type\EntityHiddenType
       arguments: ["@doctrine.orm.entity_manager"]
       tags:
        - { name: form.type, alias: entity_hidden }


#    app.oauth.handler:
#        class: AppBundle\OAuth\OAuthHandler
#        calls:
#            - [setContainer, ["@service_container"]]

    app.registration.form.factory:
        class: AppBundle\Form\Factory\ConfigurableFormFactory
        arguments:
            - "@form.factory"
            - "%fos_user.registration.form.name%"
            - "%fos_user.registration.form.type%"
            - "%fos_user.registration.form.validation_groups%"

    app.notificator:
        class: AppBundle\Notification\Notificator
        calls:
            - [setContainer, ["@service_container"]]

    app.mq_notificator:
        class: AppBundle\Notification\MQNotificator
        calls:
            - [setContainer, ["@service_container"]]

    app.event.request_subscriber:
        class: AppBundle\Event\Listener\RequestListener
        arguments:
            - "@security.token_storage"
            - "@fos_user.user_manager"
        tags:
            - {name: kernel.event_subscriber}
        calls:
            - [setContainer, ["@service_container"]]

    app.event.jms_serializer_subscriber:
        class: AppBundle\Event\Listener\JMSSerializerSubscriber

        tags:
            - {name: jms_serializer.event_subscriber}
        calls:
            - [setContainer, ["@service_container"]]

    app.coins:
        class: AppBundle\Coins\CoinsService
        calls:
            - [setContainer, ["@service_container"]]

    vich_uploader.namer_slugify_origname:
        class: AppBundle\Uploader\Namer\SluggedOrignameNamer
        arguments: ["@cocur_slugify"]

    app.session_listener:
        class: AppBundle\Event\Listener\SessionListener
        arguments: ["@service_container"]
        tags:
            - {name: kernel.event_subscriber}

    app.image:
        class: AppBundle\Tools\ImageTools
        arguments: ["@liip_imagine"]

    app.queue:
        class: AppBundle\Queue\Queue
        calls:
            - [setContainer, ["@service_container"]]

    gedmo_doctrine_extensions.listener.ip_traceable:
        class: Gedmo\IpTraceable\IpTraceableListener
        tags:
            - {name: "doctrine.event_subscriber", connection: default}
        calls:
            - [setAnnotationReader, ["@annotation_reader"]]

    app.doctrine_extensions.event_listener.ip_trace:
        class: "%app.doctrine_extensions.event_listener.ip_trace.class%"
        arguments: ["@gedmo_doctrine_extensions.listener.ip_traceable", "@service_container"]
        tags:
            - {name: "kernel.event_subscriber"}

    app.socket_io.token_storage:
        class: AppBundle\SocketIO\SocketIOTokenStorage
        calls:
            - [setContainer, ["@service_container"]]

    app.oauth:
        class: AppBundle\Security\OAuthService
        calls:
            - [setContainer, ["@service_container"]]

    api_token_authenticator:
        class:  AppBundle\Security\ApiTokenAuthenticator
        public: false

    api_token_user_provider:
        class: AppBundle\Security\ApiTokenUserProvider
        calls:
            - [setContainer, ["@service_container"]]

    app.rest.access_denied_listener:
        class: AppBundle\Event\Listener\AccessDeniedListener
        arguments:
            - "%fos_rest.access_denied_listener.formats%"
            - "%fos_rest.access_denied_listener.unauthorized_challenge%"
            - "%twig.exception_listener.controller%"
            - "@?logger"
        tags:
            - {name: "kernel.event_subscriber"}
            - {name: "monolog.logger", channel: "request"}
        calls:
            - [setContainer, ["@service_container"]]

#    app.rest.body_listener:
#        class: AppBundle\Event\Listener\RestBodyListener
#        arguments:
#            - "@fos_rest.decoder_provider"
#            - "%fos_rest.throw_exception_on_unsupported_content_type%"
#            - null
#            - true
#        tags:
#            - {name: "kernel.event_listener", event: "kernel.request", method: "onKernelRequest", priority: 11}
#        calls:
#            - [setDefaultFormat, ["%fos_rest.body_default_format%"]]

    validator.unique.your_validator_name:
        class: AppBundle\Validator\Constraints\UserOwnConversationValidator
        tags:
            - { name: validator.constraint_validator, alias: user_own_conversation }
        calls:
            - [setContainer, ["@service_container"]]
        scope: request

    security.authentication.success_handler:
        class:  AppBundle\Security\Http\Authentication\AuthenticationSuccessHandler
        arguments:  ["@security.http_utils", {}]
        calls:
            - [setContainer, ["@service_container"]]
#        tags:
#            - { name: 'monolog.logger', channel: 'security' }