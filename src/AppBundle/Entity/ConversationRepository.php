<?php

namespace AppBundle\Entity;

use Doctrine\DBAL\Connection;
use Doctrine\ORM\EntityRepository;

/**
 * ConversationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ConversationRepository extends EntityRepository
{
    /**
     * @param User $user1
     * @param User $user2
     * @return null|Conversation
     */
    public function getByUsers(User $user1, User $user2)
    {
        list($client, $model) = $this->reorderUsersByRoles($user1, $user2);
        return $this->findOneBy([
            'client' => $client,
            'model' => $model
        ]);
    }

    /**
     * @param User $user1
     * @param User $user2
     * @return null
     */
    public function createByUsers(User $user1, User $user2)
    {
        $sortedUsers = $this->reorderUsersByRoles($user1, $user2);

        try {
            $conversation = new Conversation();
            $conversation->setClient($sortedUsers[0]);
            $conversation->setModel($sortedUsers[1]);
            return $conversation;

        } catch (\Exception $e) {
            return null;
        }
    }

    /**
     * @param User $user1
     * @param User $user2
     * @return Conversation|null
     */
    public function getOrCreateByUsers(User $user1, User $user2)
    {
        $conversation = $this->getByUsers($user1, $user2);
        if (!$conversation) {
            $conversation = $this->createByUsers($user1, $user2);
            $this->getEntityManager()->persist($conversation);
            $this->getEntityManager()->flush();
        }
        return $conversation;
    }

    /**
     * @param User $user1
     * @param User $user2
     * @return array|User[]
     */
    protected function reorderUsersByRoles(User $user1, User $user2)
    {
        return $user1->hasRole('ROLE_CLIENT') ? [$user1, $user2] : [$user2, $user1];
    }

    /**
     * @param User $user
     * @param array|User[] $companions
     * @return array
     */
    public function findUserConversationsByCompanions(User $user, $companions)
    {
        $companionIds = [];
        foreach ($companions as $companion) {
            $companionIds[] = $companion->getId();
        }

        if ($user->hasRole('ROLE_CLIENT')) {
            $field = 'c.client';
            $oppositeField = 'c.model';
            $accessor = 'getModel';

        } else {
            $field = 'c.model';
            $oppositeField = 'c.client';
            $accessor = 'getClient';
        }

        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('c')
            ->from('AppBundle\\Entity\\Conversation', 'c')
            ->join($oppositeField, 'ou')
            ->where($field . ' = :user')
            ->andWhere('ou.id IN (:companion_ids)')
            ->orderBy('ou.online', 'DESC')
            ->addOrderBy('c.lastMessageDate', 'DESC')
            ->setParameter('user', $user)
            ->setParameter('companion_ids', $companionIds, Connection::PARAM_INT_ARRAY)
        ;

        /** @var Conversation[] $conversations */
        $conversations = $qb->getQuery()->execute();

        $result = [];
        foreach ($conversations as $conversation) {
            $result[$conversation->$accessor()->getId()] = $conversation;
        }

        return $result;
    }
}
