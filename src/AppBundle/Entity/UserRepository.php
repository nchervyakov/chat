<?php

namespace AppBundle\Entity;

use AppBundle\Model\ModelSearch;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\Expr\Join;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
    /**
     * Populates model search query builder based on ModelSearch instance.
     * @param ModelSearch $search
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function prepareQueryBuilderForModelSearch(ModelSearch $search)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();

        $qb->select('u')
            ->from('AppBundle:User', 'u')
            ->where('u.gender LIKE :gender')->setParameter('gender', 'female')
            ->orderBy('u.order', 'DESC');

        if ($search->getFrom() !== null) {
            $fromDate = new \DateTime('-' . $search->getFrom() . ' years');
            $qb->andWhere('u.dateOfBirth <= :from')->setParameter('from', $fromDate);
        }

        if ($search->getTo() !== null) {
            $toDate = new \DateTime('-' . $search->getTo() . ' years');
            $qb->andWhere('u.dateOfBirth >= :to')->setParameter('to', $toDate);
        }

        if ($search->isWithPhoto()) {
            $qb->andWhere('u.thumbnail != :thumbnail')->setParameter('thumbnail', '');
        }

        return $qb;
    }

    public function findUserFriends(User $user, User $companion = null)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $expr = $qb->expr();
        $qb->select('u1, u2')
            ->from('AppBundle\\Entity\\Conversation', 'c')
            ->leftJoin('AppBundle\\Entity\\User', 'u1', Join::WITH, 'c.user1 = u1')
            ->leftJoin('AppBundle\\Entity\\User', 'u2', Join::WITH, 'c.user2 = u2')
            ->where($expr->andX(
                $expr->orX('u1 = :user', 'u2 = :user')
            ))
            ->setParameter('user', $user)
        ;

        if ($companion) {
            $qb->andWhere($expr->not($expr->orX(
                $expr->andX('u1 = :user', 'u2 = :companion'),
                $expr->andX('u1 = :companion', 'u2 = :user')
            )))->setParameter('companion', $companion);
        }

        /** @var User[] $result */
        $result = $qb->getQuery()->execute();
        foreach ($result as $key => $item) {
            if ($item->getId() == $user->getId()) {
                unset($result[$key]);
                break;
            }
        }
        return $result;
    }
}
